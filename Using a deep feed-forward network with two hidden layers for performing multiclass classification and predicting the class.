import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.utils import to_categorical
(x_train, y_train), (x_test, y_test) = mnist.load_data(

x_train = x_train / 255.0
x_test = x_test / 255.0

y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)
dnn_model = Sequential()
dnn_model.add(Flatten(input_shape=(28, 28)))
dnn_model.add(Dense(128, activation='relu'))
dnn_model.add(Dense(64, activation='relu'))
dnn_model.add(Dense(10, activation='softmax'))
dnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
dnn_model.fit(x_train, y_train_cat, epochs=10, batch_size=128, validation_split=0.2)
dnn_loss, dnn_acc = dnn_model.evaluate(x_test, y_test_cat)
print("DNN Test Accuracy:", dnn_acc)
x_train_cnn = x_train.reshape(-1, 28, 28, 1)
x_test_cnn = x_test.reshape(-1, 28, 28, 1)
cnn_model = Sequential()
cnn_model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))
cnn_model.add(MaxPooling2D(pool_size=(2, 2)))
cnn_model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
cnn_model.add(MaxPooling2D(pool_size=(2, 2)))
cnn_model.add(Flatten())
cnn_model.add(Dense(128, activation='relu'))
cnn_model.add(Dense(10, activation='softmax'))
cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
cnn_model.fit(x_train_cnn, y_train_cat, epochs=10, batch_size=128, validation_split=0.2)
cnn_loss, cnn_acc = cnn_model.evaluate(x_test_cnn, y_test_cat)
print("CNN Test Accuracy:", cnn_acc)
print(f"DNN Accuracy: {dnn_acc * 100:.2f}%")
print(f"CNN Accuracy: {cnn_acc * 100:.2f}%")
