import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np
# Step 1: Prepare the XOR dataset
# Input data (X)
X = np.array([[0, 0],
[0, 1],
[1, 0],
[1, 1]])
# Output data (Y) for XOR
Y = np.array([[0], [1], [1], [0]])
# Step 2: Define the neural network model
model = Sequential()
# Add input layer (2 input nodes) and first hidden layer with 4 neurons and ReLU activation
model.add(Dense(4, input_dim=2, activation='relu'))
# Add output layer with 1 neuron and sigmoid activation function (for binary output)
model.add(Dense(1, activation='sigmoid'))
# Step 3: Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
# Step 4: Train the model
model.fit(X, Y, epochs=1000, verbose=0)
# Step 5: Evaluate the model
loss, accuracy = model.evaluate(X, Y)
print(f'Accuracy: {accuracy*100:.2f}%')
# Step 6: Make predictions
predictions = model.predict(X)
print("\nPredictions on XOR data:")
for i in range(len(X)):
print(f"Input: {X[i]} - Predicted Output: {predictions[i][0]:.4f}, Actual Output: {Y[i][0]}")
