# -*- coding: utf-8 -*-
"""DLPRactical4.ipynb"""
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

def unet_model(input_size=(128, 128, 3)):
inputs = layers.Input(input_size)

conv1 = layers.Conv2D(64, 3, activation='relu', padding='same')(inputs)
conv1 = layers.Conv2D(64, 3, activation='relu', padding='same')(conv1)
pool1 = layers.MaxPooling2D(pool_size=(2, 2))(conv1)
conv2 = layers.Conv2D(128, 3, activation='relu', padding='same')(pool1)
conv2 = layers.Conv2D(128, 3, activation='relu', padding='same')(conv2)
pool2 = layers.MaxPooling2D(pool_size=(2, 2))(conv2)
conv3 = layers.Conv2D(256, 3, activation='relu', padding='same')(pool2)
conv3 = layers.Conv2D(256, 3, activation='relu', padding='same')(conv3)
pool3 = layers.MaxPooling2D(pool_size=(2, 2))(conv3)
conv4 = layers.Conv2D(512, 3, activation='relu', padding='same')(pool3)
conv4 = layers.Conv2D(512, 3, activation='relu', padding='same')(conv4)
pool4 = layers.MaxPooling2D(pool_size=(2, 2))(conv4)

conv5 = layers.Conv2D(1024, 3, activation='relu', padding='same')(pool4)
conv5 = layers.Conv2D(1024, 3, activation='relu', padding='same')(conv5)

up6 = layers.Conv2D(512, 2, activation='relu', padding='same')(layers.UpSampling2D(size=(2,
2))(conv5))
merge6 = layers.concatenate([conv4, up6], axis=3)
conv6 = layers.Conv2D(512, 3, activation='relu', padding='same')(merge6)
conv6 = layers.Conv2D(512, 3, activation='relu', padding='same')(conv6)
up7 = layers.Conv2D(256, 2, activation='relu', padding='same')(layers.UpSampling2D(size=(2,
2))(conv6))
merge7 = layers.concatenate([conv3, up7], axis=3)
conv7 = layers.Conv2D(256, 3, activation='relu', padding='same')(merge7)
conv7 = layers.Conv2D(256, 3, activation='relu', padding='same')(conv7)
up8 = layers.Conv2D(128, 2, activation='relu', padding='same')(layers.UpSampling2D(size=(2,
2))(conv7))
merge8 = layers.concatenate([conv2, up8], axis=3)
conv8 = layers.Conv2D(128, 3, activation='relu', padding='same')(merge8)
conv8 = layers.Conv2D(128, 3, activation='relu', padding='same')(conv8)
up9 = layers.Conv2D(64, 2, activation='relu', padding='same')(layers.UpSampling2D(size=(2,
2))(conv8))
merge9 = layers.concatenate([conv1, up9], axis=3)
conv9 = layers.Conv2D(64, 3, activation='relu', padding='same')(merge9)
conv9 = layers.Conv2D(64, 3, activation='relu', padding='same')(conv9)
conv9 = layers.Conv2D(2, 3, activation='relu', padding='same')(conv9)
conv10 = layers.Conv2D(1, 1, activation='sigmoid')(conv9)
model = models.Model(inputs=inputs, outputs=conv10)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
return model

model = unet_model()

model.summary()

data_gen_args = dict(rescale=1./255)
image_datagen = ImageDataGenerator(**data_gen_args)
mask_datagen = ImageDataGenerator(**data_gen_args)

image_generator = image_datagen.flow_from_directory(
'/content/train',
class_mode=None,
target_size=(128, 128),
batch_size=32,
seed=42)
mask_generator = mask_datagen.flow_from_directory(
'/content/mask',
class_mode=None,
target_size=(128, 128),
batch_size=32,
seed=42)

def preprocess_masks(mask_batch):
return tf.reduce_mean(mask_batch, axis=-1, keepdims=True)

def combine_generators(image_generator, mask_generator):
def generator():
for img_batch, mask_batch in zip(image_generator, mask_generator):
yield img_batch, preprocess_masks(mask_batch)
return tf.data.Dataset.from_generator(
generator,
output_signature=(
tf.TensorSpec(shape=(None, 128, 128, 3), dtype=tf.float32),
tf.TensorSpec(shape=(None, 128, 128, 1), dtype=tf.float32)
)
)
train_dataset = combine_generators(image_generator, mask_generator)
model.fit(train_dataset, steps_per_epoch=200, epochs=50)
